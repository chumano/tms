@{
    ViewBag.Title = "Users";
}

<div  ng-controller="UserController as master">
<!-- START : MAIN  --------------------------------------------->
<div class="container-fluid none-display" ng-class="{'active-content' : true}">
    <div >
        <!-- TOP BUTTONS -------------------->
        <div class="row" >
            <div class="col-sm-12" >
                <h4>{{master.ObjectTitle}}</h4>
            </div>
        </div>

        <!-- FORM -------------------->
        <div class="box box-primary box-body">
        <div class="row " style="padding-bottom: 10px; padding-top: 5px">
            <div class="col-sm-12">
            <form name="dataForm" novalidate ng-submit="master.Search()">
                <div class="row">
                    <div class="col-md-6">
                        <div class="row">
                            <label class="col-md-4  control-height">Name </label>
                            <div class="col-md-8">
                                <input class="form-control" ng-model="master.DataObject.Name"
                                    placeholder="Nhập Name" required
                                    check-empty="" check-empty-message="Vui lòng nhập tên."
                                    check-length="200" check-length-message="Chiều dài tối đa là {0}."
                                    check-under="Name" />
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-md-4  control-height">Email </label>
                            <div class="col-md-8">
                                <input class="form-control" ng-model="master.DataObject.Email"
                                    placeholder="Nhập Email"
                                    check-empty="" check-empty-message="Vui lòng nhập 'Email'."
                                    check-length="200" check-length-message="Chiều dài tối đa là {0}."
                                    check-under="Email" />
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-md-4  control-height">Phone </label>
                            <div class="col-md-8">
                                <input class="form-control" ng-model="master.DataObject.Phone"
                                    placeholder="Nhập Phone"
                                    check-empty="" check-empty-message="Vui lòng nhập 'Phone'."
                                    check-length="200" check-length-message="Chiều dài tối đa là {0}."
                                    check-under="Phone" />
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="row">
                            <label class="col-md-4  control-height">Department </label>
                            <div class="col-md-8">
                                <select class="form-control width-80" ng-model="master.DataObject.DepartId"
                                    my-dropdown
                                    dropdown-id="DepartId"
                                    dropdown-table="T_Master_Department"
                                    dropdown-condition="IsActive=1"
                                    dropdown-column-value="Id"
                                    dropdown-column-name="Name"
                                    dropdown-empty-value=""
                                    dropdown-empty-text="-- Chọn --"
                                    check-empty="" check-empty-message="Vui lòng chọn 'Department'.">
                                </select>
                                <button class="btn btn-primary btn-sm" title="Refresh" type="button"
                                        ng-click="ReloadDropdown('DepartId')">
                                    <i class="fa fa-refresh white"></i>
                                </button>
                                <button class="btn btn-primary btn-sm width-10" title="Quản lý Department" type="button"
                                        data-toggle="modal" data-target="#DepartIdModal">
                                    ...
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <label class="col-md-4  control-height">Image </label>
                            <div class="col-md-8">
                                <input type="file" name="file" id="fileIMG_Id" accept="image/*"  class="none-display" />
                                <span><i class="fa fa-spinner white loading" ng-show="master.isLoadingImage"></i></span>
                                <img id="imgIMG_Id" ng-src="{{master.GetImageSrc(master.DataObject.IMG_Id)}}" class="img-thumbnail img-clickable" title="" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" style="margin-top:10px">
                     <div class="col-md-6" >
                        <!--- Thêm --->
                        <button type="button" class="btn btn-success" ng-show="!master.isEditing"  ng-disabled="!master.FormConfig._CanCreate || dataForm.$invalid" ng-click="master.SaveForm()">
                            <i class="fa fa-plus white" ng-hide="master.isSaving"></i>
                            <i class="fa fa-spinner white loading" ng-show="master.isSaving"></i> 
                            Thêm
                        </button>

                        <!--- Cập nhật --->
                        <button type="button" class="btn btn-warning" ng-show="master.isEditing"  ng-disabled="!master.FormConfig._CanUpdate || dataForm.$invalid" ng-click="master.SaveForm()" >
                            <i class="fa fa-edit white" ng-hide="master.isSaving"></i> 
                            <i class="fa fa-spinner white loading" ng-show="master.isSaving"></i>
                            Cập nhật
                        </button>

                        <!--- Clear --->
                        <button class="btn btn-primary" ng-click="master.ClearForm()" type="button">
                            <i class="fa fa-undo white"></i> Clear
                        </button>

                        <!--- Search --->
                        <button type="submit" id="btn-search" class="btn  btn-primary search"  >
                            <i class="fa fa-search" ng-hide="master.isSearching"></i>
                            <i class="fa fa-spinner white loading" ng-show="master.isSearching"></i>
                        </button>
                    </div>
                </div>
            </form>
        
            </div>
        </div>
        </div>
        <!-- TABLE -------------------->
        <div class="row">
            <div class="col-md-12">
                <table  class="table table-bordered table-striped table-hover table-condensed editable-table no-margin" 
                    ng-form="master.TableForm._tableForm" 
                    ng-table="master.TableForm.tableParams"
                    demo-tracked-table="master.TableForm._tableTracker"
                    disable-filter="master.TableForm.isAdding" >
                    <tr ng-repeat="row in $data" ng-form="rowForm" demo-tracked-table-row="row">
                        <td title="'#'" class="col-center">
                            <span>{{ ((master.TableForm.tableParams.page() - 1)  *master.TableForm.tableParams.count()) + ($index +1) }}</span>
                        </td>

                        <!--------- data columns -------------->
                        <td title="'Name'"  sortable="'Name'" ng-switch="row.isEditing || master.TableForm.isEditing" ng-class="name.$dirty ? 'bg-warning' : ''" ng-form="Name" demo-tracked-table-cell>
                            <span ng-switch-default class="editable-text"><a  href="#" ng-bind="row.Name" ng-click="master.Edit(row)"></a></span>
                            <div class="controls" ng-class="Name.$invalid && TableName.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                <input type="text" name="Name" ng-model="row.Name" class="editable-input form-control input-sm" required />
                            </div>
                        </td>

                        <td title="'Email'" sortable="'Email'" ng-switch="row.isEditing || master.TableForm.isEditing" ng-class="Email.$dirty ? 'bg-warning' : ''" ng-form="Email" demo-tracked-table-cell>
                            <span ng-switch-default class="editable-text">{{row.Email}}</span>
                            <div class="controls" ng-class="Email.$invalid && Email.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                <input type="text" name="Email" ng-model="row.Email" class="editable-input form-control input-sm" required/>
                            </div>
                        </td>

                        <td title="'Phone'" sortable="'Phone'" ng-switch="row.isEditing || master.TableForm.isEditing" ng-class="Phone.$dirty ? 'bg-warning' : ''" ng-form="Phone" demo-tracked-table-cell>
                            <span ng-switch-default class="editable-text">{{row.Phone}}</span>
                            <div class="controls" ng-class="Phone.$invalid && Phone.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                <input type="text" name="Phone" ng-model="row.Phone" class="editable-input form-control input-sm" required/>
                            </div>
                        </td>

                        <td title="'Department'" sortable="'DepartId.Name'" ng-switch="row.isEditing || master.TableForm.isEditing" ng-class="DepartId.$dirty ? 'bg-warning' : ''" ng-form="DepartId" demo-tracked-table-cell>
                            <span ng-switch-default class="editable-text">{{row.DepartId_Name}}</span>
                            <div class="controls" ng-class="DepartId.$invalid && DepartId.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                <select class="form-control"  ng-model="row.DepartId"
                                    my-dropdown
                                    dropdown-id="DepartId" 
                                    dropdown-table="T_Master_Department" 
                                    dropdown-condition="IsActive=1"
                                    dropdown-column-value="Id"
                                    dropdown-column-name="Name" 
                                    dropdown-empty-value=""
                                    dropdown-empty-text="--Chọn --" 
                                    check-empty="" check-empty-message="Vui lòng chọn." 
                                    ></select>
                               
                            </div>
                        </td>

                        <td title="'Image'"  ng-class="IMG_Id.$dirty ? 'bg-warning' : ''" class="text-center" ng-form="IMG_Id" demo-tracked-table-cell>
                           <img id="{{'img_'+$index}}" ng-src="{{master.GetImageSrc(row.IMG_Id)}}" class="img-thumbnail img-clickable" title="" />

                        </td>
                        <!---------command buttons -------------->  
                        <td width="100px" >
                            <!---edit--->
                            <button class="btn btn-default btn-sm" ng-click="master.TableForm.edit(row)" 
                                ng-if="!row.isEditing && master.FormConfig._CanUpdate"><span class="glyphicon glyphicon-pencil"></span></button>
                            <button class="btn btn-primary btn-sm" ng-click="master.TableForm.save(row, rowForm)" 
                                ng-if="row.isEditing && master.FormConfig._CanUpdate" ng-disabled="rowForm.$pristine || rowForm.$invalid"><span class="glyphicon glyphicon-ok"></span></button>             
                            
                            <!----del--->
                            <button class="btn btn-danger btn-sm" ng-click="master.TableForm.del(row)" 
                                ng-if="!row.isEditing && master.FormConfig._CanDelete"><span class="glyphicon glyphicon-trash"></span></button>
                        </td>
                    </tr>
                    <!--------------- table footer------------------>
                    <tfoot>
                        <tr>
                            <td colspan="7"><label>Số records : {{master.TableForm.tableParams.total()}} </label></td>
                        </tr>
                    </tfoot>
                </table>
                <div style="clear:both"></div>
            </div>
        </div>

    </div>
</div>
<!-- END   : MAIN  --------------------------------------------->

<!-- START : MODEL --------------------------------------------->
<div ng-controller="DepartIdController as modal">
<div id="DepartIdModal" class="modal fade " role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content" ng-if="modal.IsShow">
            <div class="modal-header bg-light-blue white border-6">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title bold">Quản lý Department </h4>
            </div>
            <div class="modal-body">
                <div style="padding: 1px 15px; border: 1px solid #C5D0DC">
                     <!-- TOP BUTTONS -------------------->
                    <div class="row" style="padding-top: 5px">
                         <div class="col-sm-6 pull-right text-right" >
                            <button class="btn btn-success  "  ng-disabled="!modal.FormConfig._CanCreate" ng-click="modal.AddItem()">
                                <i class="fa fa-plus white"></i> Thêm
                            </button>
                        </div>

                    </div>

                     <!-- TABLE -------------------->
                    <div class="row">
                        <div class="col-sm-12">
                             <table  class="table table-bordered table-striped table-hover table-condensed editable-table no-margin" 
                                ng-form="modal.TableForm._tableForm" 
                                ng-table="modal.TableForm.tableParams"
                                demo-tracked-table="modal.TableForm._tableTracker"
                                disable-filter="modal.TableForm.isAdding" >
                                <tr ng-repeat="row in $data" ng-form="rowForm" demo-tracked-table-row="row">
                                    <td title="'#'" class="col-center">
                                        <span>{{ ((modal.TableForm.tableParams.page() - 1)  *modal.TableForm.tableParams.count()) + ($index +1) }}</span>
                                    </td>

                                    <!--------- data columns -------------->
                                    <td title="'Name'"  sortable="'Name'" ng-switch=" row.isEditing || modal.TableForm.isEditing" ng-class="name.$dirty ? 'bg-warning' : ''" ng-form="Name" demo-tracked-table-cell>
                                        <span ng-switch-default class="editable-text">{{row.Name}}</span>
                                        <div class="controls" ng-class="Name.$invalid && TableName.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                            <input type="text" name="Name" ng-model="row.Name" class="editable-input form-control input-sm" required />
                                        </div>
                                    </td>
                                    <td title="'Province'" sortable="'ProvinceId_Name'" ng-switch="row.isEditing || modal.TableForm.isEditing" ng-class="ProvinceId.$dirty ? 'bg-warning' : ''" ng-form="ProvinceId" demo-tracked-table-cell>
                                        <span ng-switch-default class="editable-text" >{{row.ProvinceId_Name}}</span>
                                        <div class="controls" ng-class="ProvinceId.$invalid && ProvinceId.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                            <select class="form-control"  ng-model="row.ProvinceId"  name="ProvinceId"
                                                my-dropdown
                                                dropdown-id="ProvinceId" 
                                                dropdown-table="T_Master_Province" 
                                                dropdown-condition="IsActive=1"
                                                dropdown-column-value="Id"
                                                dropdown-column-name="Name" 
                                                dropdown-empty-value=""
                                                dropdown-empty-text="--Chọn --" 
                                                check-empty="" check-empty-message="Vui lòng chọn." 
                                                ng-change="modal.TableForm.SetValue('ProvinceId' ,row)"
                                                ></select>
                                            
                                        </div>
                                       
                                    </td>

                                    <td title="'District'" sortable="'DistrictId_Name'" ng-switch="row.isEditing || modal.TableForm.isEditing" ng-class="DistrictId.$dirty ? 'bg-warning' : ''" ng-form="DistrictId" demo-tracked-table-cell>
                                        <span ng-switch-default class="editable-text">{{row.DistrictId_Name}}</span>
                                        <div class="controls" ng-class="DistrictId.$invalid && DistrictId.$dirty ? 'has-error' : ''" ng-switch-when="true">
                                            <select class="form-control"  ng-model="row.DistrictId"
                                                my-dropdown 
                                                dropdown-id="DistrictId" 
                                                dropdown-table="T_Master_District" 
                                                dropdown-condition="" 
                                                dropdown-column-value="Id"
                                                dropdown-column-name="Name" 
                                                dropdown-empty-value=""
                                                dropdown-empty-text="--Chọn --" 
                                                check-empty="" check-empty-message="Vui lòng chọn." 
                                                 ng-change="modal.TableForm.SetValue('DistrictId' ,row)"
                                                ></select>
                                        </div>
                                    </td>
                                    <!---------command buttons -------------->  
                                    <td width="100px" >
                                        <!---edit--->
                                        <button class="btn btn-default btn-sm" ng-click="modal.TableForm.edit(row)" 
                                            ng-if="!row.isEditing && modal.FormConfig._CanUpdate"><span class="glyphicon glyphicon-pencil"></span></button>
                                        <!---save--->
                                        <button class="btn btn-primary btn-sm" ng-click="modal.TableForm.save(row, rowForm)" 
                                            ng-if="row.isEditing && modal.FormConfig._CanUpdate" ng-disabled="rowForm.$pristine || rowForm.$invalid"><span class="glyphicon glyphicon-ok"></span></button>             
                            
                                        <!---cancel--->
                                        <button class="btn btn-default btn-sm" ng-click="modal.TableForm.cancel(row, rowForm)"
                                            ng-if="row.isEditing"><span class="glyphicon glyphicon-remove"></span></button>
                            
                                        <!----del--->
                                        <button class="btn btn-danger btn-sm" ng-click="modal.TableForm.del(row)" 
                                            ng-if="!row.isEditing && modal.FormConfig._CanDelete"><span class="glyphicon glyphicon-trash"></span></button>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                   
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    <i class="fa-undo fa"></i>
                    Đóng
                </button>
            </div>
        </div>
    </div>
</div>
</div>
<!-- END   : MODEL --------------------------------------------->

</div>

<script type="text/javascript">
    CHUNOApp.controller('UserController', ['$scope', 'NgTableParams', '$controller', '$q', '$timeout',
     function ($scope, NgTableParams, $controller, $q, $timeout) {
         $controller('CommonController', { $scope: $scope });
         $scope.masterController = this;

         var self = this;
         self.ObjectTitle = "Quản lý người dùng";
         //========================================================
         //Controller Properties
         self.isEditing = false;
         self.isSaving = false;
         self.isLoadingImage = false;
         //======================================
         //form config
         var config = new DataFormConfig();
         {
             config.dataobject = 'T_Master_User';
             config.columns = ['Id', 'Name', 'Email', 'Phone', 'DepartId', 'DepartId.Name , DepartId_Name', 'IMG_Id', 'IMG_Id.Name , IMG_Id_Name'].join(';'); //ko dc
             config.sort = 'T_Master_User.Id DESC';
             config.condition = '(T_Master_User.IsActive=1 or T_Master_User.IsActive is NULL)';
             config.action = 'get'; //getall/get
             config.startrow = 0;
             config.endrow = 10;
         }

         self.FormConfig = config;
         self.FormConfig._CanCreate = true;
         self.FormConfig._CanUpdate = true;
         self.FormConfig._CanDelete = true;

         //form object
         self.NewObject = function () {
             return {
                 Id: 0,
                 Name: '',
                 Email: '',
                 Phone: '',
                 DepartId: '',
                 IMG_Id: 0,

                 Version: 0,
                 IsActive: true
             };
         }
         self.DataObject = self.NewObject();


         self.FormObject = new DataObject("T_Master_User", $scope);
         self.FormObject.SetObject(self.DataObject);

         //======================================
         //loaddata
         self.LoadData = function (params) {
             self.showloading();
             var filter = params.filter();
             var sorting = params.sorting();
             var pagesize = params.count();
             var page = params.page();
             //===========================       
             var conditionarr = [];
             for (var key in filter) {
                 var column = 'T_Master_User.' + key;
                 if (key.indexOf('.') >= 0)
                     column = key;
                 conditionarr.push(column + " like N''%" + filter[key] + "%''");
             }

             var sortnarr = [];
             for (var key in sorting) {
                 var column = 'T_Master_User.' + key;
                 if (key.indexOf('.') >= 0)
                     column = key;
                 sortnarr.push(column + " " + sorting[key] + "");
             }
             //===========================
             var config = {};
             $.extend(config, self.FormConfig);

             //sort
             if (config.sort != '') sortnarr.push(config.sort);
             config.sort = sortnarr.join(",");
             //condition
             if(conditionarr.length > 0)  config.condition += (config.condition=='' ? '' : ' AND ') + conditionarr.join(" AND ");
             //pagin
             config.numdata = pagesize;
             config.startrow = (page - 1) * pagesize + 1;
             config.endrow = (page) * pagesize;

             var dataService = new DataService({});
             dataService.config = config;

             
             //=================================
             var deferred = $q.defer();
             setTimeout(function () {
                 var count = dataService.CountListData();
                 var ds = dataService.GetListData();

                 self.TableForm.tableParams.total(count);
                 self.TableForm.totalData = count;
                 self.TableForm.data = ds;
                 
                 
                 self.hideloading();
                 deferred.resolve(ds);

                 //self.reload();
                 //self.Search();
             }, 100);

             //===========================================
             var dataset = deferred.promise;
             self.originalData = angular.copy(dataset);

             return dataset;
         };

         //======================================
         //tableform
         self.TableForm = new TableForm(self, NgTableParams);


         //======================================

         self.ClearForm = function () {
             $("#fileIMG_Id").val("");
             $("#imgIMG_Id").attr("src", self.GetImageSrc(0));

             self.DataObject = self.NewObject();
             self.isEditing = false;

         }

         //add item to table - not use
         self.AddItem = function () {
             self.TableForm.add();
         };

         self.Edit = function (object, rowForm) {
             self.isEditing = true;
             CommonHelper.CopyNeedFields(object, self.DataObject); //from -> to

         }

         self.SaveForm = function () {
             self.isSaving = true;

             setTimeout(function(){
                
                 //change something wrong
                 if (self.DataObject.DepartId == '' || self.DataObject.DepartId == 0)
                     self.DataObject.DepartId = '';

                 if (self.DataObject.IMG_Id == '' || self.DataObject.IMG_Id == 0)
                     self.DataObject.IMG_Id = '';

                 //=====================
                 //save img
                 if ($('#fileIMG_Id')[0].files.length > 0) {
                     var file = $('#fileIMG_Id')[0].files[0];
                     var formData = new FormData();
                     formData.append('file', file);
                     //formData.append('I', productId);

                     var imgid = "";
                     $.ajax({
                         url: _data_service_saveimage,
                         type: 'POST',
                         data: formData,
                         async: false,
                         processData: false,  // tell jQuery not to process the data
                         contentType: false,  // tell jQuery not to set contentType
                         success: function (data) {
                             if (typeof (data) == 'string' && data.startsWith("#error")) {
                                 ShowErrorMessage(data);
                                 imgid = '';
                             }
                             else {
                                 imgid = data;
                             }
                         }
                     });

                     //set image id to DataObject
                     self.DataObject.IMG_Id = imgid;
                 }

                 //---------------------
                 var isAdd = self.DataObject.Id <=0 ? true:false;
                 self.SaveObject(self.DataObject);
                 if (isAdd) {
                     self.ClearForm();
                 }
                 self.ReloadTable(self.TableForm);

                 self.isSaving = false;
                 $scope.$apply();
             },100);
         }

         self.SaveObject = function (object) {
             self.FormObject.SetObject(object);
             var Id = self.FormObject.SaveObject();
             if (Id > 0) {
                 self.DataObject.Id = Id;
                 $("button[data-dismiss='modal']:visible").click();

                 ShowSuccessMessage("User được tạo thành công!");
             }
             return Id;
         }

         self.DeleteObject = function (object) {
             ShowConfirmModal("Bạn có muốn xóa user " + object.Id + " - " + object.Name + "?",
                 function () {
                     if (self.FormObject.DeleteObject(object.Id)) {

                         self.ReloadTable(self.TableForm);
                         ShowSuccessMessage("User được xóa thành công!");

                     }
                 });
         }

         self.ReloadTable = function (tableForm) {
             tableForm.reload();
         }
         //======================================
         self.Search = function () {
             if (self.DataObject == undefined) return;
             //===================================
             var object = self.DataObject;

             var filterobj = {};
             if (!CommonHelper.IsNullOrEmpty(object.Name)) {
                 filterobj = { Name: object.Name };
             }
             if (!CommonHelper.IsNullOrEmpty(object.Email)) {
                 $.extend(filterobj, { Email: object.Email });
             }

             if (CommonHelper.IsSearchableValue(object.DepartId)){
                 $.extend(filterobj, { DepartId: object.DepartId });
             }


             self.TableForm.search(filterobj);
         };

         self.showloading = function () { self.isSearching = true; }
         self.hideloading = function () { self.isSearching = false; }

         self.GetImageSrc = function (imgid) {
             return _data_service_getimage + "/" + imgid;
         }
         //=======================================
         //init - data
         $("#imgIMG_Id").click(function () {
             $("#fileIMG_Id").click();
         });

         $("#fileIMG_Id").change(function (e) {
             self.isLoadingImage = true;
             $scope.$apply();
             setTimeout(function () {
                 var reader = new FileReader();

                 reader.onload = function (e) {
                     $("#imgIMG_Id").attr('src', e.target.result);
                     self.isLoadingImage = false;
                     $scope.$apply();
                 }

                 reader.readAsDataURL(e.target.files[0]);
             }, 100);
         });

         //self.TableForm.LoadData();
     }
    ]);

    function TableForm(ctrl, NgTableParams) {
        //=================================================
        //TABLE FORM
        //=================================================
        var self = this;
        //control variable
        self.isEditing = false;
        self.isAdding = false;
        self.deleteCount = 0;

        self._controller = ctrl;
        //data form
        self.totalData = 0;
        self.data = [];

        //========================================
        //table params
        self.tableParams = new NgTableParams({
            //count , page , sorting, filter 
            count: 10,
            page: 1
        }, {
            total: self.totalData,
            counts: [10, 20, 50, 100],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 13,
            paginationMinBlocks: 2,

            /////////////////////////
            //dataset: angular.copy(self.data) //static data
            getData: self._controller.LoadData
        });

        //========================================
        self.edit = edit;
        self.del = del;

        //////////
        self.search = function (filterobj) {
            
            self.tableParams.filter(filterobj);

            self.tableParams.reload();
        }


        function resetTableStatus() {
            self.isEditing = false;
            self.isAdding = false;
            self.deleteCount = 0;
            self._tableTracker.reset();
            self._tableForm.$setPristine();

        }

        ///////////////////////////////////////////////////////
      

        function edit(row, rowForm) {
            self._controller.Edit(row, rowForm);//edit on form
        }

        function del(row) {
            self._controller.DeleteObject(row);
        }


      

        self.reload = function () {
            // we need to ensure the user sees the new row we've just added.
            // it seems a poor but reliable choice to remove sorting and move them to the first page
            // where we know that our new item was added to
            self.tableParams.sorting({});
            self.tableParams.page(1);
            self.tableParams.reload();
        }

    }

</script>

<script type="text/javascript">
    //-- START : MODEL -----------------------------------------------------//
    $(document).ready(function () {
        $('#DepartIdModal').on('shown.bs.modal', function (e) {
            var modalId = $(this).attr("id");
            var scope = angular.element(document.getElementById(modalId)).scope();
            scope.$apply(function () {
                scope.modal.SetShownModal(true);
            });
        }).on('hide.bs.modal', function (e) {
            var modalId = $(this).attr("id");
            var scope = angular.element(document.getElementById(modalId)).scope();
            scope.$apply(function () {
                scope.modal.SetShownModal(false);
            });
        });
    });

    CHUNOApp.controller('DepartIdController', ['$scope', 'NgTableParams', '$controller', '$q', '$timeout',
        function ($scope, NgTableParams, $controller, $q, $timeout) {
            $scope.departIdModalController = this;
            var self = this;
            self.IsShow = false;
            self.SetShownModal = function (isShow) {
                self.IsShow = isShow;
            }

            //=============================
            //FormConfig
            var config = new DataFormConfig();
            {
                config.dataobject = 'T_Master_Department';
                config.columns = ['Id', 'Name', 'ProvinceId', 'ProvinceId.Name , ProvinceId_Name', 'DistrictId', 'DistrictId.Name , DistrictId_Name'].join(';'); //ko dc
                config.sort = 'T_Master_Department.Id DESC';
                config.condition = '(T_Master_Department.IsActive=1 or T_Master_Department.IsActive is NULL)';
                config.action = 'getall'; //getall/get
            }

            self.FormConfig = config;
            self.FormConfig._CanCreate = true;
            self.FormConfig._CanUpdate = true;
            self.FormConfig._CanDelete = true;
            //======================================
            //form object
            self.NewObject = function () {
                return {
                    Id: 0,
                    Name: '',
                    ProvinceId: '',
                    DistrictId: '',
                    ProvinceIdObject :{},

                    Version: 0,
                    IsActive: true
                };
            }
            self.DataObject = self.NewObject();


            self.FormObject = new DataObject("T_Master_Department", $scope);
            self.FormObject.SetObject(self.DataObject);

            //================================================
            //loaddata
            self.LoadData = function () {
                if (self.showloading) self.showloading();
                var config = {};
                $.extend(config, self.FormConfig);

                var dataService = new DataService({});
                dataService.config = config;


                //=================================
                setTimeout(function () {
                    var count = dataService.CountListData();
                    var ds = dataService.GetListData();

                    self.TableForm.tableParams.total(count);
                    self.TableForm.totalData = count;
                    self.TableForm.data = ds;

                    self.TableForm.tableParams.settings({
                        total: count,
                        dataset: angular.copy(ds)
                    });

                    self.TableForm.reload();
                    if (self.hideloading) self.hideloading();
                
                }, 100);
            }

            self.ReloadTable = function (tableForm) {
                self.LoadData();
            }


            self.TableForm = new DepartmentTableForm(self, $scope, NgTableParams);

           
            self.showloading = function () { self.isSearching = true; }
            self.hideloading = function () { self.isSearching = false; }


            //===============================================
            self.ClearForm = function () {
                
                self.DataObject = self.NewObject();
                self.isEditing = false;

            }

            //add item to table - not use
            self.AddItem = function () {
                self.TableForm.add();
            };

            self.Edit = function (object, rowForm) {
                self.isEditing = true;

                //self.TableForm.isEditing = true;
                object.isEditing = true;
            }

            self.SaveForm = function () {
                self.isSaving = true;

                setTimeout(function () {
                   
                    //---------------------
                    var isAdd = self.DataObject.Id <= 0 ? true : false;
                    self.SaveObject(self.DataObject);
                    if (isAdd) {
                        self.ClearForm();
                    }
                    self.ReloadTable(self.TableForm);

                    self.isSaving = false;
                    $scope.$apply();
                }, 100);
            }

            self.SaveObject = function (object) {
               
                //change something wrong
                if (object.ProvinceId == '' || object.ProvinceId == 0 || isNaN(object.ProvinceId))
                    object.ProvinceId = '';

                if (object.DistrictId == '' || object.DistrictId == 0 || isNaN(object.DistrictId))
                    object.DistrictId = '';



                self.FormObject.SetObject(object);
                var Id = self.FormObject.SaveObject();
                if (Id > 0) {
                    self.DataObject.Id = Id;
                   
                    ShowSuccessMessage("User được tạo thành công!");
                }
                return Id;
            }

            self.DeleteObject = function (object) {
                ShowConfirmModal("Bạn có muốn xóa user " + object.Id + " - " + object.Name + "?",
                    function () {
                        if (self.FormObject.DeleteObject(object.Id)) {

                            self.ReloadTable(self.TableForm);
                            ShowSuccessMessage("User được xóa thành công!");

                        }
                    });
            }

           
            //======================================
            self.Search = function () {
                if (self.DataObject == undefined) return;
                //===================================
                var object = self.DataObject;

                var filterobj = {};
                if (!CommonHelper.IsNullOrEmpty(object.Name)) {
                    filterobj = { Name: object.Name };
                }
 
                if (CommonHelper.IsSearchableValue(object.ProvinceId)) {
                    $.extend(filterobj, { ProvinceId: object.ProvinceId });
                }

                self.TableForm.search(filterobj);
            };

            //===============================================
            //int data
            self.LoadData();

            self.GetCondition = function (row) {
                if (row.ProvinceId == '') return 'IsActive=1';

                return 'IsActive=1 And  ProvinceId=' + row.ProvinceId ;
            }

        }
    ]);

    function DepartmentTableForm(ctrl, $scope, NgTableParams) {
        //=================================================
        //TABLE FORM
        //=================================================
        var self = this;
        //control variable
        self.isEditing = false;
        self.isAdding = false;
        self.deleteCount = 0;

        self._controller = ctrl;
        //data form
        self.totalData = 0;
        self.data = [];

        
        //========================================
        //table params
        self.tableParams = new NgTableParams({
            //count , page , sorting, filter 
            count: 10,
            page: 1
        }, {
            total: self.totalData,
            counts: [10, 20, 50, 100],
            // determines the pager buttons (left set of buttons in demo)
            paginationMaxBlocks: 13,
            paginationMinBlocks: 2,

            /////////////////////////
            dataset: angular.copy(self.data) //static data
            //getData: self._controller.LoadData //dynamic data
        });

        //========================================
        self.add = add;
        self.edit = edit;
        self.save = save;
        self.del = del;
        self.del_new = del_new;
        self.cancel = cancel;
        //////////
        self.search = function (filterobj) {
            self.tableParams.filter(filterobj);

            //self.tableParams.reload();
        }


        function resetTableStatus() {
            self.isEditing = false;
            self.isAdding = false;
            self.deleteCount = 0;
            self._tableTracker.reset();
            self._tableForm.$setPristine();

        }

        ///////////////////////////////////////////////////////
        function add() {
            self.isAdding = true;
            var newRow = self._controller.NewObject();
            newRow.isAdding = true;
            newRow.isEditing = true;

            self.tableParams.settings().dataset.unshift(newRow);
            
            self.reload();
        }

        function edit(row, rowForm) {
            self._controller.Edit(row, rowForm);//edit on form
        }

        function save(row, rowForm) {
            var result = self._controller.SaveObject(row);

            //nếu là thêm mới thì reload lại
            if (result &&  (row.Id == undefined|| row.Id==0 || row.Id=='') ) {
                self._controller.ReloadTable();
                return;
            }

            if (result) {
                var originalRow = resetRow(row, rowForm);
                angular.extend(originalRow, row);
            }


        }

        function cancel(row, rowForm) {
            var originalRow = resetRow(row, rowForm);

            //-------------------------------
            if (originalRow != undefined)
                angular.extend(row, originalRow); //load old data
            else
                self.del_new(row); //delete the new row
        }

        function del(row) {
            self._controller.DeleteObject(row);
        }

        function del_new(row) {
            _.remove(self.tableParams.settings().dataset, function (item) {
                return row === item;
            });
            self.deleteCount++;
            //self.tableTracker.untrack(row);
            self.tableParams.reload().then(function (data) {
                if (data.length === 0 && self.tableParams.total() > 0) {
                    self.tableParams.page(self.tableParams.page() - 1);
                    self.tableParams.reload();
                }
            });
        }

        //==============================================================
        function resetRow(row, rowForm) {
            row.isEditing = false;
            rowForm.$setPristine();
            self._tableTracker.untrack(row);
            if (row.Id == undefined) return undefined;

            //return row
            return _.find(self.data, { 'Id': row.Id });
        }

        self.reload = function () {
            // we need to ensure the user sees the new row we've just added.
            // it seems a poor but reliable choice to remove sorting and move them to the first page
            // where we know that our new item was added to
            self.tableParams.sorting({});
            self.tableParams.page(1);
            self.tableParams.reload();
        }

        self.SetValue = function (ddid, row) {
            var items = $scope["dropdown_" + ddid];
            var objs = $.grep(items, function (e) { return e.Id == row[ddid]; });
            row[ddid+'_Name'] = "";
            if (objs.length > 0) {
                var obj = objs[0];
                row[ddid + '_Name'] = obj.Name;
            }
        }

    }

    //-- END   : MODEL -----------------------------------------------------//

</script>