@using Template;
<!-- *****MODAL COLUMN : @Model.TableName Form ***** -->

<script type="text/javascript">
//as modal column
    CHUNOApp.controller('controller_modalcol_@Model.TableName', ['$scope','$rootScope', 'NgTableParams', '$controller', '$q', '$timeout',
function ($scope,$rootScope, NgTableParams, $controller, $q, $timeout) {
    $controller('CommonController', { $scope: $rootScope });
    
    
    var self = this;
    self.ObjectTitle = "@Model.Title";
    //========================================================
    //Controller Properties
    self.isEditing = false;
    self.isSaving = false;
    self.isSearching = false;
    self.isLoadingImage = false;
    //======================================
    //form config
    var config = new DataFormConfig();
    {
        config.dataobject = '@Model.TableName';
        config.columns = ['Id',
            @foreach(var col in @Model.Columns)
            {
            @iTemplate.JS_Column_On_FormConfig(col)
            }
        ].join(';'); //ko dc
        config.sort = '@iTemplate.TableDotColumn(@Model.TableName,"Id") DESC';
        config.condition = '(@iTemplate.TableDotColumn(@Model.TableName,"IsActive") = 1 )';
        config.action = 'get'; //getall/get
        config.startrow = 0;
        config.endrow = 10;
    }

    self.FormConfig = config;
    self.FormConfig._CanCreate = true;
    self.FormConfig._CanUpdate = true;
    self.FormConfig._CanDelete = true;

    //form object
    self.NewObject = function () {
        return {
            Id: 0,   
            @foreach(var col in @Model.Columns){
            @iTemplate.JS_Column_On_NewObject(col)
            }
            Version: 0,
            IsActive: true
        };
    }
    self.DataObject = self.NewObject();

    self.FormObject = new DataObject('@Model.TableName', $scope);
    self.FormObject.SetObject(self.DataObject);
    //======================================
    self.ClearForm = function () {       
        @foreach(var col in @Model.Columns)
        {
            if(col.IsImage)
            {
        <text>
        $("#input_@col.Name").val("");
        $("#img_@col.Name").attr("src", CommonHelper.GetImageSrc(0));
        </text>
            }
        }

        self.DataObject = self.NewObject();
        self.isEditing = false;
    }

    self.EditObject = function (object, rowForm) {
        self.isEditing = true;
        self.DataObject = self.NewObject(); //đảm bảo thông tin ko bị undefined
        CommonHelper.CopyNeedFields(object, self.DataObject); //from -> to
    }

    self.SaveForm = function () {
        self.isSaving = true;
        setTimeout(function () {
            //change something wrong
            @foreach(var col in @Model.Columns)
            {
                if(col.IsForeignKey && !col.IsImage && !col.IsFile){
            <text>
            if (self.DataObject.@col.Name == '' || self.DataObject.@col.Name == 0)
                self.DataObject.@col.Name = '';
            </text>
                }
            }
            //=====================
            //save img
            @foreach(var col in @Model.Columns)
            {
                if(col.IsImage)
                {
            <text>
            if ($('#input_@col.Name')[0].files.length > 0) {
                var file = $('#input_@col.Name')[0].files[0];
                var formData = new FormData();
                formData.append('file', file);

                var imgid = "";
                $.ajax({
                    url: _data_service_saveimage,
                    type: 'POST',
                    data: formData,
                    async: false,
                    processData: false,  // tell jQuery not to process the data
                    contentType: false,  // tell jQuery not to set contentType
                    success: function (data) {
                        if (typeof (data) == 'string' && data.startsWith("#error")) {
                            ShowErrorMessage(data);
                            imgid = '';
                        }
                        else {
                            imgid = data;
                        }
                    }
                });
                //set image id to DataObject
                self.DataObject.@col.Name = imgid;          
            }
            </text>
                }
            }
            
            //---------------------
            var isAdd = self.DataObject.Id <= 0 ? true : false;
            self.SaveObject(self.DataObject);
            if (isAdd) {
                self.ClearForm();
            }
            self.ReloadTable(self.TableForm);

            self.isSaving = false;
            $scope.$apply();
        }, 100);
    }

    self.SaveObject = function (object) {
        self.FormObject.SetObject(object);
        var Id = self.FormObject.SaveObject();
        if (Id > 0) {
            self.DataObject.Id = Id;
            //$("button[data-dismiss='modal']:visible").click(); //hide modal đi
            $scope.ReloadMasterDrodowns('@Model.TableName');

            ShowSuccessMessage("Đã tạo thành công!");
        }
        return Id;
    }

    self.DeleteObject = function (object) {
        ShowConfirmModal("Bạn có muốn xóa [@Model.Title] " + object.Id + " - " + object.Name + "?",
            function () {
                if (self.FormObject.DeleteObject(object.Id)) {

                    self.ReloadTable(self.TableForm);
                    $scope.ReloadMasterDrodowns('@Model.TableName');

                    ShowSuccessMessage("Đã xóa thành công!");
                }
            });
    }

    //======================================
    //tableform
    self.TableForm = new DynamicTableForm(NgTableParams, $q, self, function (params) {
        var config = {};
        $.extend(config, self.FormConfig);
        //===========================    
        var filter = params.filter();
        var sorting = params.sorting();
        var pagesize = params.count();
        var page = params.page();
        //===========================    
        //condition
        var conditionarr = [];
        for (var key in filter) {
            var column = '@Model.TableName' +'.' + key;
            if (key.indexOf('.') >= 0)
                column = key;
            var cond = CommonHelper.CreateCondition(column, filter[key]);
            conditionarr.push(cond);
        }
        if (conditionarr.length > 0) config.condition += (config.condition == '' ? '' : ' AND ') + conditionarr.join(" AND ");

        //sort
        var sortnarr = [];
        for (var key in sorting) {
            var column = '@Model.TableName' +'.' + key;
            if (key.indexOf('.') >= 0)
                column = key;
            sortnarr.push(column + " " + sorting[key] + "");
        }

        if (config.sort != '') sortnarr.push(config.sort);
        config.sort = sortnarr.join(",");
        //===========================
        return config;
    });

    self.ReloadTable = function (tableForm) {
        tableForm.reload();
    }
    //======================================
    self.Search = function () {
        if (self.DataObject == undefined) return;
        //===================================
        var object = self.DataObject;
        var filterobj = {};

        @foreach(var col in @Model.Columns)
        {
            if(col.IsFilter)
            {
            @iTemplate.JS_Column_On_Filter(col);
            }
        }
        self.TableForm.search(filterobj);
    };

    self.showloading = function () { self.isSearching = true; }
    self.hideloading = function () { self.isSearching = false; }

    //========================================================

    //=======================================
    //init - data
    @foreach(var col in @Model.Columns)
    {
        if(col.IsImage)
        {
    <text>
    $("#img_@col.Name").click(function () {
        $("#input_@col.Name").click();
    });
    $("#input_@col.Name").change(function (e) {
        self.isLoadingImage = true;
        $scope.$apply();
        setTimeout(function () {
            var reader = new FileReader();
            reader.onload = function (e) {
                $("#img_@col.Name").attr('src', e.target.result);
                self.isLoadingImage = false;
                $scope.$apply();
            }
            reader.readAsDataURL(e.target.files[0]);
        }, 100);
    });
    </text>
        }
    }

    //====================================================
    //======================MODAL HANLDER ================
    $scope.@(@Model.TableName)_ModalAPI.SetObject = function (object) {
        self.DataObject = object;
    }

    //==========================
    //init modal
    self.InitModal = function () {
        $('#ModalCol_@Model.TableName').on('show.bs.modal', function (e) {
            var modalId = $(this).attr("id");
            var scope = angular.element(document.getElementById(modalId)).scope();
            scope.$apply(function () {
                scope.modal.SetShownModal(true);
            });
        }).on('hide.bs.modal', function (e) {
            var modalId = $(this).attr("id");
            var scope = angular.element(document.getElementById(modalId)).scope();
            scope.$apply(function () {
                scope.modal.SetShownModal(false);
            });
        });
    }

    self.IsShow = false;
    self.SetShownModal = function (isShow) {
        self.IsShow = isShow;
    }

    
}]);

</script>

